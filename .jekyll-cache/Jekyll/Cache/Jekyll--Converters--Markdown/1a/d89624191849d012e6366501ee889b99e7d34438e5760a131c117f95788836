I"Ï*<p>Bash is the default Unix shell installed on the majority of Linux distributions. Like any other shell, Bash uses a command-line interface (CLI) so its users can utilize the operating system. Therefore, knowledge of Bash‚Äôs CLI is necessary for working with most Linux systems. This post covers the basics of Bash and the shell‚Äôs CLI.</p>

<h2 id="command-overview">Command Overview</h2>
<p>Before diving into Bash specifics, here is a quick summary of some useful Unix-like commands.</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">pwd</code> prints the working directory. (The directory the user is currently in).</li>
  <li><code class="language-plaintext highlighter-rouge">ls</code> lists directory contents.</li>
  <li><code class="language-plaintext highlighter-rouge">cd</code> change directory, used to move around the filesystem.</li>
  <li><code class="language-plaintext highlighter-rouge">cat</code> concatenate files and print standard output (stdout).</li>
  <li><code class="language-plaintext highlighter-rouge">grep</code> search for patterns in a file using regex.</li>
  <li><code class="language-plaintext highlighter-rouge">find</code> search for files within a filesystem.</li>
  <li><code class="language-plaintext highlighter-rouge">file</code> determine file type.</li>
  <li><code class="language-plaintext highlighter-rouge">sort</code> sort lines in a text file.</li>
  <li><code class="language-plaintext highlighter-rouge">date</code></li>
</ul>

<h2 id="special-characters">Special Characters</h2>
<p>Bash evaluates some characters to have a non-literal meaning when typed in the command line. These characters carry out a <em>special</em> instruction in the shell are called <strong>special characters</strong>, and can modify the function of a command.</p>

<h3 id="-current-directory"><code class="language-plaintext highlighter-rouge">.</code> Current Directory</h3>
<p>A period <code class="language-plaintext highlighter-rouge">.</code> represents the current directory. Typically periods are used in relative and absolute paths. For example, if a user wanted to run a script from the current directory, they would run the file like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>./script.sh
</code></pre></div></div>
<p>This tells Bash to look in the current directory for the <code class="language-plaintext highlighter-rouge">script.sh</code> file.</p>
<h3 id="-parent-directory"><code class="language-plaintext highlighter-rouge">..</code> Parent Directory</h3>
<p>The double period or double dot <code class="language-plaintext highlighter-rouge">..</code> represents the parent directory of the current directory. <code class="language-plaintext highlighter-rouge">..</code> is used to move up one level in the directory tree.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ..
</code></pre></div></div>
<p><img src="photos/Bash&amp;CLI/doubledot.png" alt="Double Dot" /></p>

<h3 id="-path-separator"><code class="language-plaintext highlighter-rouge">/</code> Path Separator</h3>
<p>Forward slash <code class="language-plaintext highlighter-rouge">/</code>, often called slash, separates the directories in a pathname.</p>

<p><img src="photos/Bash&amp;CLI/slash.png" alt="Slash 1" /></p>

<h3 id="-wildcard"><code class="language-plaintext highlighter-rouge">*</code> Wildcard</h3>
<p>The wildcard <code class="language-plaintext highlighter-rouge">*</code> matches any number of characters based upon its placement in a string. Consider the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls track*
</code></pre></div></div>
<p>Matches all characters with the string <em>track</em> before <code class="language-plaintext highlighter-rouge">*</code></p>

<p><img src="photos/Bash&amp;CLI/ls-1.png" alt="ls-1" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls *.flac
</code></pre></div></div>
<p>Matches all characters with the string <em>.flac</em> after <code class="language-plaintext highlighter-rouge">*</code></p>

<p><img src="photos/Bash&amp;CLI/slash-2.png" alt="Slash 2" /></p>

<p>The wildcard character <code class="language-plaintext highlighter-rouge">*</code> is often used in file searches so the full name does not need to be typed.</p>

<h3 id="--input-redirection"><code class="language-plaintext highlighter-rouge">&lt;</code>  Input Redirection</h3>
<p>The input redirector pulls data in a stream from a given source. Usually, programs receive their data from the keyboard. However, data can be pulled from another source, like a file.</p>

<p>Let‚Äôs use the <code class="language-plaintext highlighter-rouge">sort</code> command as an example. The file <code class="language-plaintext highlighter-rouge">fruits.txt</code> contains the following lines:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>watermelon
cantaloupe
honeydew
apple
banana
</code></pre></div></div>
<p>Notice the fruit is not in alphabetical order. A user can pull the data from the file into the <code class="language-plaintext highlighter-rouge">sort</code> command by using the <code class="language-plaintext highlighter-rouge">&lt;</code> operator.</p>

<p><img src="photos/Bash&amp;CLI/input-redirect.png" alt="input-redirect" /></p>

<h3 id="-output-redirection"><code class="language-plaintext highlighter-rouge">&lt;</code> Output Redirection</h3>
<p>The output redirector <code class="language-plaintext highlighter-rouge">&gt;</code> redirects a program‚Äôs output to somewhere else. In this case, I‚Äôm going to redirect the results to a file named time.txt.</p>

<p><img src="photos/Bash&amp;CLI/output-redirect.png" alt="output-redirect" /></p>

<p>Please note, the <code class="language-plaintext highlighter-rouge">&gt;</code> redirector outputs overwrites any existing data in a file. You can use the <code class="language-plaintext highlighter-rouge">&gt;&gt;</code> redirector to append any new changes to a file.</p>

<h3 id="-pipe-operator"><code class="language-plaintext highlighter-rouge">|</code> Pipe Operator</h3>
<p>The pipe operator <code class="language-plaintext highlighter-rouge">|</code> is one of my favorite operators. The pipe takes the output of the first command and makes it the input of the second command. Let‚Äôs say a user wants to list all directories and files in the <code class="language-plaintext highlighter-rouge">/etc</code> directory. They know that‚Äôs going to be a long list and that most of the output will scroll off the top of the screen. The <code class="language-plaintext highlighter-rouge">less</code> command will break the output into pages, and the user can scroll upward or downward through the results.</p>

<p><img src="photos/Bash&amp;CLI/pipe.png" alt="Pipe" /></p>

<h2 id="arguments-options-and-parameters">Arguments, Options and Parameters</h2>
<p>A <em>command</em> is split into an array of strings named <strong>arguments</strong>. Normally, argument 0 is the command name. Argument 1 is the first element following argument 0, and so on.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#long list all files in /tmp and /var/tmp
$ ls -la /tmp /var/tmp 
arg0 = ls
arg1 = -la
arg2 = /tmp
arg3 = /var/tmp
</code></pre></div></div>

<p>An <strong>option</strong> is a type of <em>argument</em> modifying the behavior of a <em>command</em>. For example <code class="language-plaintext highlighter-rouge">-l</code> commonly means ‚Äúlong‚Äù, <code class="language-plaintext highlighter-rouge">-a</code> means ‚Äúall‚Äù. <code class="language-plaintext highlighter-rouge">-la</code> are <em>two</em> options combined in a <em>single</em> argument.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ls -la /tmp /var/tmp
option1= -l
option2= -a
</code></pre></div></div>

<p>A <a href="https://en.wikipedia.org/wiki/Parameter#Computing">parameter</a> is an argument that provides information to either the <em>command</em> or one of its options. For example in <code class="language-plaintext highlighter-rouge">-o file</code>, <em>file</em> is the parameter of the <code class="language-plaintext highlighter-rouge">-o</code> option. Unlike options, parameters are not hardcoded. Bash does this so users are free to use whatever string suits their needs.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ls -la /tmp /var/tmp
parameter1= /tmp
parameter2= /var/tmp
</code></pre></div></div>

<h2 id="manual-pages">Manual Pages</h2>
<p>Linux has built-in documentation for the majority of commands installed on the system. Descriptions about the command‚Äôs use case, operation, and functionality are all found in the manual pages. To pull up the manual pages for a command, simply type <code class="language-plaintext highlighter-rouge">man</code> in the CLI and the command‚Äôs name.</p>

<p>Pull up the manual pages for <code class="language-plaintext highlighter-rouge">grep</code>.</p>

<p><img src="photos/Bash&amp;CLI/man-grep-cli.png" alt="man-grep-cli" /></p>

<p>The following is then displayed.</p>

<p><img src="photos/Bash&amp;CLI/man-grep.png" alt="man-grep" /></p>

<h3 id="synopsis-header">SYNOPSIS Header</h3>
<p>The header SYNOPSIS tells you how to run the command. In this example
<code class="language-plaintext highlighter-rouge">grep</code> takes in two mandatory arguments, the pattern to match by, and the file to search in. <code class="language-plaintext highlighter-rouge">grep</code> also takes in options, but remember, <strong>options are optional</strong>. They are not required to run the command.</p>

<h3 id="description-header">DESCRIPTION Header</h3>
<p>The header DESCRIPTION is self-explanatory, providing a brief description of the command and how to use it.</p>

<h3 id="options-header">OPTIONS Header</h3>
<p>The header OPTIONS lists and describes all the available options for the commands. Knowing a command‚Äôs options is important to extend its functionality.</p>

<h3 id="navigation--help">Navigation &amp; Help</h3>
<p>Navigating the manual pages is easy.  Use the arrows keys to scroll up and down, or if you are a vim user, use j and k. The forward slash <code class="language-plaintext highlighter-rouge">/</code> is used to search for keywords. Use n and N to shift through search matches.</p>

<p>Funny enough, there are manual pages for the manual pages. Press h to pull up documentation for the program <code class="language-plaintext highlighter-rouge">man</code>. 
<img src="photos/Bash&amp;CLI/help-man.png" alt="man-help" /></p>

<p>Once done browsing the manual pages, press q to exit the program.</p>
:ET